#----------------------------------------------------------------------
# Development setup
# Setting up the development environment after a fresh repository clone
#----------------------------------------------------------------------
cd ~/Code/Rails/YourInsiderZambia
cp _meta/examples/database/database.yml config # Setup the database
cp _meta/examples/config/config.yml config # Setup the configuration files
cp -r _meta/examples/capistrano/deploy* config # Setup the capistrano deployment recipe

# Set up symbolic link to externlised assets
cd ~/Code/Rails/YourInsiderZambia/app/assets
ln -nfs ~/Dropbox/Your\ Insider\ Zambia/Externalised\ Assets/Your\ Insider\ Zambia\ Website/Images/ images
ln -nfs ~/Dropbox/Your\ Insider\ Zambia/Externalised\ Assets/Your\ Insider\ Zambia\ Website/PDFs/ pdfs

cd ~/Code/Rails/YourInsiderZambia


# Set up the hosts (/etc/hosts)
127.0.0.1	yourinsiderzambia.dev		www.yourinsiderzambia.dev

# Setup deployment references:
git remote add virtual deploy@rails.pcsvm:/var/Repositories/Git/YourInsiderZambia.git
git remote add staging deploy@asher.pcsvps:/var/Repositories/Git/YourInsiderZambia.git
git remote add production deploy@gad.pcsvps:/var/Repositories/Git/YourInsiderZambia.git




# Tests
#======
# Git
git push virtual
git push staging
git push production


# Bundle install
cd ~/Code/Rails/YourInsiderZambia
bundle install


# Bundle update
cd ~/Code/Rails/YourInsiderZambia
bundle update
gem cleanup
notify-send "Bundle updated"


# Guard for testing
cd ~/Code/Rails/YourInsiderZambia
rake db:drop
rake db:setup
rake db:test:prepare
bundle exec guard




# Running the Application in development
#=======================================
cd ~/Code/Rails/YourInsiderZambia
rails server --port=3100 --binding=yourinsiderzambia.dev # In one terminal window - to run the application

# BrowserSync
cd ~/Code/Rails/YourInsiderZambia
./node_modules/browser-sync/bin/browser-sync.js start --proxy localhost:3100 --files "app/**/*, config/locales/*.yml" --no-open

# View the site in a browser by visiting
http://localhost:3001





# Benchmarking
#==============
# Ref: https://www.phusionpassenger.com/library/walkthroughs/basics/ruby/process_management.html
# https://github.com/wg/wrk
# https://github.com/wg/wrk/wiki/Installing-Wrk-on-Linux
wrk -t 16 -c 200 http://0.0.0.0:3000/




# Gem management
#===============
# MAINTAIN GEM BUNDLE
cd ~/Code/Rails/YourInsiderZambia
bundle update
gem cleanup

# DELETE ALL INSTALLED GEMS
gem list | cut -d" " -f1 | xargs gem uninstall -aIx




# Continuous Application Deployment
#==================================
# VIRTUAL
cd ~/Code/Rails/YourInsiderZambia
git checkout master
git merge dev
git push
git push virtual
cap virtual deploy
git tag "`date +virtual_%Y-%m-%d_%H%M%S`"
git push bitbucket master
git push origin master --tags
git push bitbucket master --tags
notify-send "Virtual stage deployed"

# STAGING
cd ~/Code/Rails/YourInsiderZambia
git checkout master
git merge dev
git push
git push staging
cap staging deploy
git tag "`date +staging_%Y-%m-%d_%H%M%S`"
git push bitbucket master
git push origin master --tags
git push bitbucket master --tags
notify-send "Staging stage deployed"

# PRODUCTION
cd ~/Code/Rails/YourInsiderZambia
git checkout master
git merge dev
git push
git push production
cap production deploy
git tag "`date +production_%Y-%m-%d_%H%M%S`"
git push bitbucket master
git push origin master --tags
git push bitbucket master --tags
notify-send "Production stage deployed"



















#----------------------------------------------------------------------
# Virtual setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the # mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@rails.pcsvm
ssh vladimir@rails.pcsvm

# Set up the hosts (/etc/hosts):
ssh vladimir@rails.pcsvm

# Make sure the following line is in /etc/hosts:
127.0.0.1 rails.pcsvm

# Test with
ping rails.pcsvm


# Check that SSH "loops back" on the virtual machine (host key verification):
# On the local development machine
ssh deploy@rails.pcsvm

# On the virtual machine
ssh deploy@rails.pcsvm

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@rails.pcsvm


# Set up the Repository folder
ssh vladimir@rails.pcsvm
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories

# Create the Git repository:
ssh deploy@rails.pcsvm
cd /var/Repositories/Git/
mkdir -p YourInsiderZambia.git
cd YourInsiderZambia.git
git init --bare
exit

# Push to the Git repository:
# From the development machine:
cd ~/Code/Rails/YourInsiderZambia
git remote add virtual deploy@rails.pcsvm:/var/Repositories/Git/YourInsiderZambia.git
git push virtual master # or git push virtual


# Set up the Apps folder
ssh vladimir@rails.pcsvm
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Create the AssetsVault folder
ssh vladimir@rails.pcsvm
sudo mkdir -p /var/AssetsVault
sudo chown deploy:deploy /var/AssetsVault


# Configure nginx
# On the development machine
cd ~/Code/Rails/YourInsiderZambia/_meta/examples/nginx
scp nginx.yourinsiderzambia.virtual.conf vladimir@rails.pcsvm:~/yourinsiderzambia.virtual.conf


# On the virtual machine
# Set up the nginx configuration
ssh vladimir@rails.pcsvm
sudo mv ~/yourinsiderzambia.virtual.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/yourinsiderzambia.virtual.conf /etc/nginx/sites-enabled/yourinsiderzambia.virtual


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p YourInsiderZambia
cd YourInsiderZambia
sudo openssl genrsa -des3 -out yourinsiderzambia.virtual.key 1024

# pass phrase: virtual

sudo openssl req -new -key yourinsiderzambia.virtual.key -out yourinsiderzambia.virtual.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: Your Insider Zambia
# Orgnisational Unit Name:
# Common Name: yourinsiderzambia.virtual.
# Email: itsupport@yourinsiderzambia.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp yourinsiderzambia.virtual.key yourinsiderzambia.virtual.key.original
sudo openssl rsa -in yourinsiderzambia.virtual.key.original -out yourinsiderzambia.virtual.key

sudo openssl x509 -req -days 365 -in yourinsiderzambia.virtual.csr -signkey yourinsiderzambia.virtual.key -out yourinsiderzambia.virtual.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh vladimir@rails.pcsvm
mysql -u root -p
create user 'yourinsiderzambia'@'localhost' identified by 'VirtualYourInsiderZambiaPassword';
grant all on YourInsiderZambia_virtual.* to 'yourinsiderzambia'@'localhost';
grant all on YourInsiderZambia_virtual_development.* to 'yourinsiderzambia'@'localhost';
grant all on YourInsiderZambia_virtual_test.* to 'yourinsiderzambia'@'localhost';

# Setup the MariaDB database:
mysql -u yourinsiderzambia -p
create database YourInsiderZambia_virtual;
create database YourInsiderZambia_virtual_development;
create database YourInsiderZambia_virtual_test;


# Setup the YAML and .env configuration files:
# From the development machine
cd ~/Code/Rails/YourInsiderZambia/_meta/examples/config
scp config.virtual.yml deploy@rails.pcsvm:~/config.yml

cd ~/Code/Rails/YourInsiderZambia/_meta/examples/database
scp database.virtual.yml deploy@rails.pcsvm:~/database.yml

cd ~/Code/Rails/YourInsiderZambia/_meta/examples/env
scp .env.virtual deploy@rails.pcsvm:~/.env

cd ~/Code/Rails/YourInsiderZambia/
ssh deploy@rails.pcsvm

# From the virtual machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/YourInsiderZambia/virtual
mv database.yml ~/Projects/Configurations/YourInsiderZambia/virtual/
mv config.yml ~/Projects/Configurations/YourInsiderZambia/virtual/
mv .env ~/Projects/Configurations/YourInsiderZambia/virtual/
exit

# From the development machine
# Capistrano steps for initial deployment
# VIRTUAL MACHINE DEPLOYMENT
cd ~/Code/Rails/YourInsiderZambia/
git checkout master
git merge dev
git push
git push virtual # May need to 'git push virtual master'
cap virtual git:check
cap virtual deploy:setup_asset_vault
cap virtual deploy:check # Update configuration files and create the database after this

# From the virtual machine (as the deploy user)
# After running cap virtual deploy:check
ssh deploy@rails.pcsvm
cd ~/Projects/Configurations/YourInsiderZambia/virtual

cp *.yml /var/Apps/YourInsiderZambia/virtual/shared/config/
cp .env /var/Apps/YourInsiderZambia/virtual/shared/

exit

# From the development machine
cd ~/Code/Rails/YourInsiderZambia/
cap virtual deploy:check
cap virtual deploy


# After deploying the app
# From the virtual machine
sudo service monit reload



















#----------------------------------------------------------------------
# Staging setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the # mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@asher.pcsvps
ssh silumesii@asher.pcsvps

# Set up the hosts (/etc/hosts):
ssh silumesii@asher.pcsvps

# Make sure the following line is in /etc/hosts:
127.0.0.1 asher.pcsvps

# Test with
ping asher.pcsvps


# Check that SSH "loops back" on the staging machine (host key verification):
# On the local development machine
ssh deploy@asher.pcsvps

# On the staging machine
ssh deploy@asher.pcsvps

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@asher.pcsvps


# Set up the Repository folder
ssh silumesii@asher.pcsvps
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories

# Create the Git repository:
ssh deploy@asher.pcsvps
cd /var/Repositories/Git/
mkdir -p YourInsiderZambia.git
cd YourInsiderZambia.git
git init --bare
exit

# Push to the Git repository:
# From the development machine:
cd ~/Code/Rails/YourInsiderZambia
git remote add staging deploy@asher.pcsvps:/var/Repositories/Git/YourInsiderZambia.git
git push staging master # or git push staging


# Set up the Apps folder
ssh silumesii@asher.pcsvps
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Create the AssetsVault folder
ssh silumesii@asher.pcsvps
sudo mkdir -p /var/AssetsVault
sudo chown deploy:deploy /var/AssetsVault


# Configure nginx
# On the development machine
cd ~/Code/Rails/YourInsiderZambia/_meta/examples/nginx
scp nginx.yourinsiderzambia.clientcase.net.conf silumesii@asher.pcsvps:~/yourinsiderzambia.clientcase.net.conf


# On the staging machine
# Set up the nginx configuration
ssh silumesii@asher.pcsvps
sudo mv ~/yourinsiderzambia.clientcase.net.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/yourinsiderzambia.clientcase.net.conf /etc/nginx/sites-enabled/yourinsiderzambia.clientcase.net


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p YourInsiderZambia
cd YourInsiderZambia
sudo openssl genrsa -des3 -out yourinsiderzambia.clientcase.net.key 1024

# pass phrase: yourinsiderzambia

sudo openssl req -new -key yourinsiderzambia.clientcase.net.key -out yourinsiderzambia.clientcase.net.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: Your Insider Zambia
# Orgnisational Unit Name:
# Common Name: yourinsiderzambia.clientcase.net.
# Email: itsupport@yourinsiderzambia.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp yourinsiderzambia.clientcase.net.key yourinsiderzambia.clientcase.net.key.original
sudo openssl rsa -in yourinsiderzambia.clientcase.net.key.original -out yourinsiderzambia.clientcase.net.key

sudo openssl x509 -req -days 365 -in yourinsiderzambia.clientcase.net.csr -signkey yourinsiderzambia.clientcase.net.key -out yourinsiderzambia.clientcase.net.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh silumesii@asher.pcsvps
mysql -u root -p
create user 'yourinsiderzambia'@'localhost' identified by 'StagingYourInsiderZambiaPassword';
grant all on YourInsiderZambia_staging.* to 'yourinsiderzambia'@'localhost';
grant all on YourInsiderZambia_staging_development.* to 'yourinsiderzambia'@'localhost';
grant all on YourInsiderZambia_staging_test.* to 'yourinsiderzambia'@'localhost';

# Setup the MariaDB database:
mysql -u yourinsiderzambia -p
create database YourInsiderZambia_staging;
create database YourInsiderZambia_staging_development;
create database YourInsiderZambia_staging_test;


# Setup the YAML and .env configuration files:
# From the development machine
cd ~/Code/Rails/YourInsiderZambia/_meta/examples/config
scp config.yourinsiderzambia.clientcase.net.yml deploy@asher.pcsvps:~/config.yml

cd ~/Code/Rails/YourInsiderZambia/_meta/examples/database
scp database.yourinsiderzambia.clientcase.net.yml deploy@asher.pcsvps:~/database.yml

cd ~/Code/Rails/YourInsiderZambia/_meta/examples/env
scp .env.yourinsiderzambia.clientcase.net deploy@asher.pcsvps:~/.env

cd ~/Code/Rails/YourInsiderZambia/
ssh deploy@asher.pcsvps

# From the staging machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/YourInsiderZambia/staging
mv database.yml ~/Projects/Configurations/YourInsiderZambia/staging/
mv config.yml ~/Projects/Configurations/YourInsiderZambia/staging/
mv .env ~/Projects/Configurations/YourInsiderZambia/staging/
exit

# From the development machine
# Capistrano steps for initial deployment
# VIRTUAL MACHINE DEPLOYMENT
cd ~/Code/Rails/YourInsiderZambia/
git checkout master
git merge dev
git push
git push staging # May need to 'git push staging master'
cap staging git:check
cap staging deploy:setup_asset_vault
cap staging deploy:check # Update configuration files and create the database after this

# From the staging machine (as the deploy user)
# After running cap staging deploy:check
ssh deploy@asher.pcsvps
cd ~/Projects/Configurations/YourInsiderZambia/staging

cp *.yml /var/Apps/YourInsiderZambia/staging/shared/config/
cp .env /var/Apps/YourInsiderZambia/staging/shared/

exit

# From the development machine
cd ~/Code/Rails/YourInsiderZambia/
cap staging deploy:check
cap staging deploy


# After deploying the app
# From the staging machine
sudo service monit reload



















#----------------------------------------------------------------------
# Production setup
#----------------------------------------------------------------------
# Need:
# Git
# ImageMagick
# MariaDB					# Remember to install libmariadbclient-dev (for the # mysql2 gem to work)
# nginx
# nodejs				# JavaScript runtime
# RVM
# SSH


# Test SSH access:
ssh deploy@gad.pcsvps
ssh silumesii@gad.pcsvps

# Set up the hosts (/etc/hosts):
ssh silumesii@gad.pcsvps

# Make sure the following line is in /etc/hosts:
127.0.0.1 gad.pcsvps

# Test with
ping gad.pcsvps


# Check that SSH "loops back" on the production machine (host key verification):
# On the local development machine
ssh deploy@gad.pcsvps

# On the production machine
ssh deploy@gad.pcsvps

# Or

# If the "loop back" fails:
ssh-keygen
ssh-copy-id deploy@gad.pcsvps


# Set up the Repository folder
ssh silumesii@gad.pcsvps
sudo mkdir -p /var/Repositories/Git
sudo chown deploy:deploy /var/Repositories

# Create the Git repository:
ssh deploy@gad.pcsvps
cd /var/Repositories/Git/
mkdir -p YourInsiderZambia.git
cd YourInsiderZambia.git
git init --bare
exit

# Push to the Git repository:
# From the development machine:
cd ~/Code/Rails/YourInsiderZambia
git remote add production deploy@gad.pcsvps:/var/Repositories/Git/YourInsiderZambia.git
git push production master # or git push production


# Set up the Apps folder
ssh silumesii@gad.pcsvps
sudo mkdir -p /var/Apps
sudo chown deploy:deploy /var/Apps


# Create the AssetsVault folder
ssh silumesii@gad.pcsvps
sudo mkdir -p /var/AssetsVault
sudo chown deploy:deploy /var/AssetsVault


# Configure nginx
# On the development machine
cd ~/Code/Rails/YourInsiderZambia/_meta/examples/nginx
scp nginx.yourinsiderzambia.com.conf silumesii@gad.pcsvps:~/yourinsiderzambia.com.conf


# On the production machine
# Set up the nginx configuration
ssh silumesii@gad.pcsvps
sudo mv ~/yourinsiderzambia.com.conf /etc/nginx/sites-available
sudo ln -nfs /etc/nginx/sites-available/yourinsiderzambia.com.conf /etc/nginx/sites-enabled/yourinsiderzambia.com


# Generate an SSL certificate and key:
sudo mkdir -p /etc/nginx/ssl
cd /etc/nginx/ssl
sudo mkdir -p YourInsiderZambia
cd YourInsiderZambia
sudo openssl genrsa -des3 -out yourinsiderzambia.com.key 1024

# pass phrase: yourinsiderzambia

sudo openssl req -new -key yourinsiderzambia.com.key -out yourinsiderzambia.com.csr

# Country Name: ZM
# Province: Lusaka Province
# Locality Name: Lusaka
# Organisation Name: Your Insider Zambia
# Orgnisational Unit Name:
# Common Name: yourinsiderzambia.com.
# Email: itsupport@yourinsiderzambia.com
# Challenge password: <Blank>
# Optional Company Name: <Blank>

sudo cp yourinsiderzambia.com.key yourinsiderzambia.com.key.original
sudo openssl rsa -in yourinsiderzambia.com.key.original -out yourinsiderzambia.com.key

sudo openssl x509 -req -days 365 -in yourinsiderzambia.com.csr -signkey yourinsiderzambia.com.key -out yourinsiderzambia.com.crt


# Test the nginx configuration:
sudo service nginx configtest

# If all is well, load the new nginx configuration:
sudo service nginx reload

# Setup the MariaDB database user:
ssh silumesii@gad.pcsvps
mysql -u root -p
create user 'yourinsiderzambia'@'localhost' identified by 'ProductionYourInsiderZambiaPassword';
grant all on YourInsiderZambia_production.* to 'yourinsiderzambia'@'localhost';
grant all on YourInsiderZambia_production_development.* to 'yourinsiderzambia'@'localhost';
grant all on YourInsiderZambia_production_test.* to 'yourinsiderzambia'@'localhost';

# Setup the MariaDB database:
mysql -u yourinsiderzambia -p
create database YourInsiderZambia_production;
create database YourInsiderZambia_production_development;
create database YourInsiderZambia_production_test;


# Setup the YAML and .env configuration files:
# From the development machine
cd ~/Code/Rails/YourInsiderZambia/_meta/examples/config
scp config.yourinsiderzambia.com.yml deploy@gad.pcsvps:~/config.yml

cd ~/Code/Rails/YourInsiderZambia/_meta/examples/database
scp database.yourinsiderzambia.com.yml deploy@gad.pcsvps:~/database.yml

cd ~/Code/Rails/YourInsiderZambia/_meta/examples/env
scp .env.yourinsiderzambia.com deploy@gad.pcsvps:~/.env

cd ~/Code/Rails/YourInsiderZambia/
ssh deploy@gad.pcsvps

# From the production machine (as the deploy user)
cd
mkdir -p ~/Projects/Configurations/YourInsiderZambia/production
mv database.yml ~/Projects/Configurations/YourInsiderZambia/production/
mv config.yml ~/Projects/Configurations/YourInsiderZambia/production/
mv .env ~/Projects/Configurations/YourInsiderZambia/production/
exit

# From the development machine
# Capistrano steps for initial deployment
# VIRTUAL MACHINE DEPLOYMENT
cd ~/Code/Rails/YourInsiderZambia/
git checkout master
git merge dev
git push
git push production # May need to 'git push production master'
cap production git:check
cap production deploy:setup_asset_vault
cap production deploy:check # Update configuration files and create the database after this

# From the production machine (as the deploy user)
# After running cap production deploy:check
ssh deploy@gad.pcsvps
cd ~/Projects/Configurations/YourInsiderZambia/production

cp *.yml /var/Apps/YourInsiderZambia/production/shared/config/
cp .env /var/Apps/YourInsiderZambia/production/shared/

exit

# From the development machine
cd ~/Code/Rails/YourInsiderZambia/
cap production deploy:check
cap production deploy


# After deploying the app
# From the production machine
sudo service monit reload



















# Hints
#======

# gzip
#-----
gzip database.sql


# ImageMagick
#------------
convert -resize 350x525 -gravity center -extent 350x525 brochure_advertisement_cover.png tmp.png
convert  -alpha off FILE.pdf FILE.png
mogrify -resize 412x412 -gravity center -extent 310x438 -format jpg *.pdf


# ImageOptim
#-----------
# With Node
# Ref: http://www.smashingmagazine.com/2013/12/17/imageoptim-cli-batch-compression-tool/
npm install -g imageoptim-cli
imageoptim --image-alpha --jpeg-mini --quit --directory ~/Sites/MyProject


# Image sizes
#------------
favicon.ico: 16x16
apple-touch-icon: 57x57

# With Rubygems
# Ref: https://github.com/toy/image_optim
# Ref: https://github.com/toy/image_optim#usage


# MariaDB
#--------
# Database export:
# The EXTENSION can be something like "sql"
mysqldump -u USERNAME -p DATABASE_NAME > ~/OUTPUTFILE.EXTENSION

# Database import:
mysql -u USERNAME -p DATABASE_NAME < BACKUPFILE

# Set or update user password
set password for 'username'@'localhost' = password('cleartext password');


# Ruby
#-----
# Working with gemsets:
rvm @global do gem update
rvm @global do gem cleanup


# Billing
#--------
# Use git_time_extractor
cd ~/Code/Rails/YourInsiderZambia
git_time_extractor > ~/Desktop/yourinsiderzambia_time_log.csv --initial-effort 15 --merge-effort 15 --session-duration 2









# Links
#======
http://gorails.com/deploy/ubuntu/12.04
http://stackoverflow.com/questions/3031412/how-to-export-a-mysql-database-using-command-prompt
http://webcheatsheet.com/SQL/mysql_backup_restore.php
http://www.modrails.com/documentation/Users%20guide%20Nginx.html (Note the "RVM helper tool" section)
https://dev.mysql.com/doc/refman/5.0/en/set-password.html
https://dev.mysql.com/doc/refman/5.1/en/mysqldump.html
https://rvm.io/gemsets/global
